apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply from: '../autodimension.gradle'

/**
 * start config and check ci*/
apply from: '../checkci.gradle'

def APP_ID = "com.framgia.wsm"

android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools

    flavorDimensions "default"

    defaultConfig {
        applicationId "${APP_ID}"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode build_versions.versionCode
        versionName build_versions.versionName

        vectorDrawables.useSupportLibrary = true

        testApplicationId "${APP_ID + ".test"}"
        testInstrumentationRunner "${APP_ID + ".test.Instrumentation"}"
    }

    productFlavors {
        dev {
            manifestPlaceholders = [applicationName: "WSM-DEV"]
        }
        stg {
//            applicationIdSuffix = ".stg"
            manifestPlaceholders = [applicationName: "WSM-STG"]
        }
        prd {
            manifestPlaceholders = [applicationName: "@string/app_name"]
        }
    }

    sourceSets {
        androidTest {
            assets.srcDirs = ['src/androidTest/assets']
        }
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        debug {}

        release {
            if (!System.getenv('CI')) {
                def signFile = file("../local.properties")
                def signingProps = new Properties()

                signingProps.load(new FileInputStream(signFile))

                storeFile file("../keystores/wsm.keystore")
                storePassword signingProps['storePassword']
                keyAlias signingProps['keyAlias']
                keyPassword signingProps['keyPassword']
            }
        }
    }

    buildTypes {
        debug {
            ext.betaDistributionReleaseNotesFilePath = "release_notes.txt"
            ext.betaDistributionGroupAliases = "QAFR"
            ext.betaDistributionNotifications = true

            applicationVariants.all { variant -> appendVersionNameVersionCode(variant) }
        }
        release {
            shrinkResources true
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            applicationVariants.all { variant -> appendVersionNameVersionCode(variant) }
        }
    }

    applicationVariants.all { variant ->
        def BASE_URL
        if (variant.buildType.isDebuggable()) {
            BASE_URL = "https://edev.framgia.vn"
        } else {
            BASE_URL = "https://wsm.framgia.vn"
        }
        variant.buildConfigField "String", "BASE_URL", "\"${BASE_URL}\""
    }

    dexOptions {
        if (System.getenv()["CIRCLECI"] as boolean) {
            javaMaxHeapSize "2048M"
            preDexLibraries false
        }
    }
}

@SuppressWarnings("GroovyAssignabilityCheck")
def appendVersionNameVersionCode(variant) {
    variant.outputs.all { output ->
        def applicationId = variant.mergedFlavor.applicationId + (variant.buildType.applicationIdSuffix ==
                null ? "" : variant.buildType.applicationIdSuffix)
        if (output.zipAlign) {
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def time = new Date().format("dd-MM-yyyy", TimeZone.getTimeZone("UTC"))
                def fileName = outputFile.name.replace("app",
                        "${applicationId}_v${variant.versionName}_${variant.versionCode}_${time}")
                outputFileName = fileName
            }
        }
    }
}

dependencies {
    // Support libraries
    implementation "com.android.support:appcompat-v7:$versions.support"
    implementation "com.android.support:design:$versions.support"
    implementation "com.android.support:cardview-v7:$versions.support"
    implementation "com.android.support.constraint:constraint-layout:$versions.constraint_layout"
    implementation "com.github.daolq3012:MaterialDialog:$versions.material_dialog"

    // RxJava
    implementation "io.reactivex.rxjava2:rxandroid:$versions.rx_android"
    implementation "io.reactivex.rxjava2:rxjava:$versions.rxjava2"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$versions.retrofit"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.retrofitLogger"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit"
    implementation "com.squareup.retrofit2:retrofit-mock:$versions.retrofit"

    // Dagger
    implementation "com.google.dagger:dagger:$versions.dagger"
    implementation "com.google.dagger:dagger-android:$versions.dagger"
    implementation "com.google.dagger:dagger-android-support:$versions.dagger"
    annotationProcessor "com.google.dagger:dagger-android-processor:$versions.dagger"
    annotationProcessor "com.google.dagger:dagger-compiler:$versions.dagger"

    // Other
    implementation "com.google.firebase:firebase-messaging:$versions.firebase"
    implementation "com.github.clans:fab:$versions.fab_button"
    implementation "com.github.bumptech.glide:glide:$versions.glide"
    implementation "org.greenrobot:eventbus:$versions.eventbus"
    implementation "com.github.GrenderG:Toasty:$versions.toast_custom"
    implementation "com.github.PhilJay:MPAndroidChart:$versions.mpchart"

    // Dependencies for local unit tests
    androidTestCompile "junit:junit:$versions.junit"
    androidTestCompile "org.hamcrest:hamcrest-all:$versions.hamcrest"
    androidTestCompile "org.mockito:mockito-all:$versions.mockito_all"

    // Resolve conflicts between main and local unit tests
    androidTestCompile "com.android.support:support-annotations:$versions.support"
    androidTestCompile "com.android.support:support-core-utils:$versions.support"

    // Android Testing Support Library's runner and rules
    androidTestCompile "com.android.support.test:runner:$versions.atsl_runner"
    androidTestCompile "com.android.support.test:rules:$versions.atsl_runner"

    // Dependencies for Android unit tests
    androidTestCompile "junit:junit:$versions.junit"
    androidTestCompile "org.mockito:mockito-core:$versions.mockito", { exclude group: 'net.bytebuddy' }
    androidTestCompile "com.linkedin.dexmaker:dexmaker-mockito:$versions.dexmaker"

    // Espresso UI Testing
    androidTestCompile "com.android.support.test.espresso:espresso-core:$versions.espresso"
    androidTestCompile "com.android.support.test.espresso:espresso-contrib:$versions.espresso"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:$versions.espresso"
    androidTestCompile "info.cukes:cucumber-android:$versions.cucumber@jar"
    androidTestCompile "info.cukes:cucumber-picocontainer:$versions.cucumber"

    // Resolve conflicts between main and test APK:
    androidTestCompile "com.android.support:support-annotations:$versions.support"
    androidTestCompile "com.android.support:appcompat-v7:$versions.support"
    androidTestCompile "com.android.support:design:$versions.support"

    compile("com.crashlytics.sdk.android:crashlytics:$versions.crashlytics@aar") {
        transitive = true
    }
}
apply plugin: 'com.google.gms.google-services'
